Sum of Digits / Digital Root

Given n, take the sum of the digits of n. If that value has more than one digit, continue reducing in this way until a single-digit number is produced. The input will be a non-negative integer.

def digital_root(n):
    string = str(n)
    list = []
    sum = 0
    for i in string:
        list.append(int(i))
    for j in list:
        sum += j
    while len(str(sum)) > 1:
        list = []
        string = str(sum)
        sum = 0
        for i in string:
            list.append(int(i))
        for j in list:
            sum += j
    return sum
   
   
   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

IQ Test

Bob is preparing to pass IQ test. The most frequent task in this test is to find out which one of the given numbers differs from the others. Bob observed that one number usually differs from the others in evenness. Help Bob â€” to check his answers, he needs a program that among the given numbers finds one that is different in evenness, and return a position of this number.

def iq_test(numbers):
    string = (numbers.split(" "))
    number = []
    for i in string:
        number.append(int(i))    
    count = 0
    even = 0
    odd = 0
    firstcase = 0
    for i in number:
        if i % 2 == 0 and count == 0: 
            even += 1
            count +=1
            firstcase = i
        if i % 2 != 0 and count == 0:
            odd += 1
            count +=1
            firstcase = i
        if i % 2 == 0 and count > 0:
            if firstcase % 2 != 0 and number.index(i) == 1:
                if number[number.index(i) + 1] % 2 != 0:
                    return number.index(i) + 1
                else:
                    return number.index(firstcase) +1
            if even > 0:
                continue
            else:
                return number.index(i) + 1
        if i % 2 != 0 and count > 0:
            if firstcase % 2 == 0 and number.index(i) == 1:
                if number[number.index(i) + 1] % 2 == 0:
                    return number.index(i) + 1
                else:
                    return number.index(firstcase) +1
            if odd > 0:
                continue
            else:
                return number.index(i) + 1
                
 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 
 Exes and Ohs
 
 Check to see if a string has the same amount of 'x's and 'o's. The method must return a boolean and be case insensitive. The string can contain any char.
 
 
 def xo(s):
    x = 0
    o = 0
    for i in s:
        a = i.capitalize()
        if a == "X":
            x += 1
        if a == "O":
            o += 1
        else:
            continue
    if x == o:
        return True
    else:
        return False
        
 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 
 Find the next perfect square!
 
Complete the findNextSquare method that finds the next integral perfect square after the one passed as a parameter. Recall that an integral perfect square is an integer n such that sqrt(n) is also an integer.

If the parameter is itself not a perfect square then -1 should be returned. You may assume the parameter is positive.

import math

def find_next_square(sq):
    a = math.sqrt(sq)
    b = a.is_integer()
    if b == True :
        c = a+1 
        return int(c**2)
    else:
        return -1
 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Create Phone Number

Write a function that accepts an array of 10 integers (between 0 and 9), that returns a string of those numbers in the form of a phone number.

def create_phone_number(n):
    number = "(" + str(n[0]) + str(n[1]) + str(n[2]) + ") " + str(n[3]) + str(n[4]) + str(n[5]) +"-" + str(n[6]) + str(n[7]) + str(n[8]) + str(n[9])
    return number
    
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Array.diff
Your goal in this kata is to implement a difference function, which subtracts one list from another and returns the result.

It should remove all values from list a, which are present in list b.

def array_diff(a, b):
    solution = []
    for i in a:
        solution.append(i)
        for j in b:
            if i != j:
                continue
            if i == j:
                solution.remove(i)
    return solution
    
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Duplicate Encoder
    
    The goal of this exercise is to convert a string to a new string where each character in the new string is "(" if that character appears only once in the original string, or ")" if that character appears more than once in the original string. Ignore capitalization when determining if a character is a duplicate.
    
    def duplicate_encode(word):
    string=""
    cap = word.upper()
    for i in cap.upper():
        if cap.count(i) > 1:
            string += ")"
        else:
            string += "("
    return string
    
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    
    Find the missing letter
    
    Write a method that takes an array of consecutive (increasing) letters as input and that returns the missing letter in the array.

You will always get an valid array. And it will be always exactly one letter be missing. The length of the array will always be at least 2.
The array will always contain letters in only one case.
    
    def find_missing_letter(chars):
    
    alphabet = ["a","b","c","d","e","f","g","h","i","j","k","l","m","n","o","p","q","r","s","t","u","v","w","x","y","z"]
    first= chars[0].lower()
    start = alphabet.index(first)
    newlist = alphabet[start:]
    for i in newlist:
        a = i.upper()
        print(chars.count(a))
        b = i.lower()
        if chars.count(a) == 1 or chars.count(b) == 1:
            continue
        else:
            if alphabet.count(chars[0]) == 0:
                return a
            else: 
                return b 

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 
  Multiply 

def multiply(a, b): 
    c = a * b
    return c
  
    
    
